// <auto-generated />
using System;
using BillingService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BillingService.Infrastructure.Migrations
{
    [DbContext(typeof(BillingServiceContext))]
    [Migration("20250714095621_AlterandoTipoColunaDataVencimentoDaParcela")]
    partial class AlterandoTipoColunaDataVencimentoDaParcela
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BillingService.Domain.Entities.Fatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroParcelas")
                        .HasColumnType("int");

                    b.Property<Guid>("PropostaAprovadaEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropostaAprovadaEventId")
                        .IsUnique();

                    b.ToTable("Faturas");
                });

            modelBuilder.Entity("BillingService.Domain.Entities.Parcela", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataPagamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("date");

                    b.Property<Guid>("FaturaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FaturaId");

                    b.ToTable("Parcelas");
                });

            modelBuilder.Entity("BillingService.Domain.Entities.PropostaAprovadaEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataRecebimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropostaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusProcessamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ValorAprovado")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PropostasAprovadaEvento");
                });

            modelBuilder.Entity("BillingService.Domain.Entities.Fatura", b =>
                {
                    b.HasOne("BillingService.Domain.Entities.PropostaAprovadaEvent", "PropostaAprovadaEvent")
                        .WithOne("Fatura")
                        .HasForeignKey("BillingService.Domain.Entities.Fatura", "PropostaAprovadaEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropostaAprovadaEvent");
                });

            modelBuilder.Entity("BillingService.Domain.Entities.Parcela", b =>
                {
                    b.HasOne("BillingService.Domain.Entities.Fatura", "Fatura")
                        .WithMany("Parcelas")
                        .HasForeignKey("FaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fatura");
                });

            modelBuilder.Entity("BillingService.Domain.Entities.PropostaAprovadaEvent", b =>
                {
                    b.OwnsOne("BillingService.Domain.Entities.OpcaoPagamento", "OpcaoPagamentoSelecionada", b1 =>
                        {
                            b1.Property<Guid>("PropostaAprovadaEventId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("ComJuros")
                                .HasColumnType("bit");

                            b1.Property<int>("QuantidadeParcelas")
                                .HasColumnType("int");

                            b1.Property<decimal>("ValorParcela")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("ValorTotalComJuros")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PropostaAprovadaEventId");

                            b1.ToTable("PropostasAprovadaEvento");

                            b1.WithOwner()
                                .HasForeignKey("PropostaAprovadaEventId");
                        });

                    b.Navigation("OpcaoPagamentoSelecionada");
                });

            modelBuilder.Entity("BillingService.Domain.Entities.Fatura", b =>
                {
                    b.Navigation("Parcelas");
                });

            modelBuilder.Entity("BillingService.Domain.Entities.PropostaAprovadaEvent", b =>
                {
                    b.Navigation("Fatura");
                });
#pragma warning restore 612, 618
        }
    }
}
